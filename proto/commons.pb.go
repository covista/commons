// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: commons.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type KeyType int32

const (
	KeyType_UNKNOWN   KeyType = 0
	KeyType_DIAGNOSED KeyType = 1
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "UNKNOWN",
		1: "DIAGNOSED",
	}
	KeyType_value = map[string]int32{
		"UNKNOWN":   0,
		"DIAGNOSED": 1,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_commons_proto_enumTypes[0].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_commons_proto_enumTypes[0]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{0}
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a unique authorization key given to the user upon
	// interaction with an authorized (healthcare) professional
	AuthorizationKey []byte `protobuf:"bytes,1,opt,name=authorization_key,json=authorizationKey,proto3" json:"authorization_key,omitempty"`
	// a set of timestamp-enin pairs (from the user)
	Reports []*TimestampedTEK `protobuf:"bytes,2,rep,name=reports,proto3" json:"reports,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{0}
}

func (x *Report) GetAuthorizationKey() []byte {
	if x != nil {
		return x.AuthorizationKey
	}
	return nil
}

func (x *Report) GetReports() []*TimestampedTEK {
	if x != nil {
		return x.Reports
	}
	return nil
}

type GetKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// retrieve keys for the given health authority
	HAK []byte `protobuf:"bytes,1,opt,name=HAK,proto3" json:"HAK,omitempty"`
	// retrieve keys for the given day (ENIN rounded 'down'
	// to the nearest day)
	ENIN uint32 `protobuf:"varint,2,opt,name=ENIN,proto3" json:"ENIN,omitempty"`
	// alternatively fetch a temporal range of keys
	Hrange *HistoricalRange `protobuf:"bytes,3,opt,name=hrange,proto3" json:"hrange,omitempty"`
}

func (x *GetKeyRequest) Reset() {
	*x = GetKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRequest) ProtoMessage() {}

func (x *GetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRequest.ProtoReflect.Descriptor instead.
func (*GetKeyRequest) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{1}
}

func (x *GetKeyRequest) GetHAK() []byte {
	if x != nil {
		return x.HAK
	}
	return nil
}

func (x *GetKeyRequest) GetENIN() uint32 {
	if x != nil {
		return x.ENIN
	}
	return 0
}

func (x *GetKeyRequest) GetHrange() *HistoricalRange {
	if x != nil {
		return x.Hrange
	}
	return nil
}

type HistoricalRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// YYYY-MM-DD  of *end* of day range; defaults to the current day
	StartDate string `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// how many days back to retrieve records; defaults to 1
	Days uint32 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *HistoricalRange) Reset() {
	*x = HistoricalRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalRange) ProtoMessage() {}

func (x *HistoricalRange) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalRange.ProtoReflect.Descriptor instead.
func (*HistoricalRange) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{2}
}

func (x *HistoricalRange) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *HistoricalRange) GetDays() uint32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type TokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// secret API key that uniquely identifies an authorized organization
	ApiKey []byte `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// the kind of key being requested; this is stored in the backend along
	// with the generated authorization_key
	KeyType KeyType `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3,enum=proto.KeyType" json:"key_type,omitempty"`
	// bounds on the time range for the allowed keys; RFC 3339 timestamps
	PermittedRangeStart string `protobuf:"bytes,3,opt,name=permitted_range_start,json=permittedRangeStart,proto3" json:"permitted_range_start,omitempty"`
	PermittedRangeEnd   string `protobuf:"bytes,4,opt,name=permitted_range_end,json=permittedRangeEnd,proto3" json:"permitted_range_end,omitempty"`
}

func (x *TokenRequest) Reset() {
	*x = TokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRequest) ProtoMessage() {}

func (x *TokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRequest.ProtoReflect.Descriptor instead.
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{3}
}

func (x *TokenRequest) GetApiKey() []byte {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

func (x *TokenRequest) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_UNKNOWN
}

func (x *TokenRequest) GetPermittedRangeStart() string {
	if x != nil {
		return x.PermittedRangeStart
	}
	return ""
}

func (x *TokenRequest) GetPermittedRangeEnd() string {
	if x != nil {
		return x.PermittedRangeEnd
	}
	return ""
}

type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// unique 16-byte key generated to be given to a user. The generation
	// of this key means that the association of <authority, auth_key> is
	// stored in the backend
	AuthorizationKey []byte `protobuf:"bytes,2,opt,name=authorization_key,json=authorizationKey,proto3" json:"authorization_key,omitempty"`
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{4}
}

func (x *TokenResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TokenResponse) GetAuthorizationKey() []byte {
	if x != nil {
		return x.AuthorizationKey
	}
	return nil
}

type AddReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AddReportResponse) Reset() {
	*x = AddReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReportResponse) ProtoMessage() {}

func (x *AddReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReportResponse.ProtoReflect.Descriptor instead.
func (*AddReportResponse) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{5}
}

func (x *AddReportResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetDiagnosisKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  string          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Record *TimestampedTEK `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *GetDiagnosisKeyResponse) Reset() {
	*x = GetDiagnosisKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosisKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosisKeyResponse) ProtoMessage() {}

func (x *GetDiagnosisKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosisKeyResponse.ProtoReflect.Descriptor instead.
func (*GetDiagnosisKeyResponse) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{6}
}

func (x *GetDiagnosisKeyResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetDiagnosisKeyResponse) GetRecord() *TimestampedTEK {
	if x != nil {
		return x.Record
	}
	return nil
}

type TimestampedTEK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TEK  []byte `protobuf:"bytes,1,opt,name=TEK,proto3" json:"TEK,omitempty"`
	ENIN uint32 `protobuf:"varint,2,opt,name=ENIN,proto3" json:"ENIN,omitempty"`
}

func (x *TimestampedTEK) Reset() {
	*x = TimestampedTEK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampedTEK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampedTEK) ProtoMessage() {}

func (x *TimestampedTEK) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampedTEK.ProtoReflect.Descriptor instead.
func (*TimestampedTEK) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{7}
}

func (x *TimestampedTEK) GetTEK() []byte {
	if x != nil {
		return x.TEK
	}
	return nil
}

func (x *TimestampedTEK) GetENIN() uint32 {
	if x != nil {
		return x.ENIN
	}
	return 0
}

var File_commons_proto protoreflect.FileDescriptor

var file_commons_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64,
	0x54, 0x45, 0x4b, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x65, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x48, 0x41, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x48, 0x41, 0x4b, 0x12,
	0x12, 0x0a, 0x04, 0x45, 0x4e, 0x49, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x45,
	0x4e, 0x49, 0x4e, 0x12, 0x2e, 0x0a, 0x06, 0x68, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x68, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x44, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x6e, 0x64, 0x22, 0x52, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x29, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x5e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x54, 0x45, 0x4b, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x22, 0x36, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64,
	0x54, 0x45, 0x4b, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x45, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x54, 0x45, 0x4b, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x4e, 0x49, 0x4e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x45, 0x4e, 0x49, 0x4e, 0x2a, 0x25, 0x0a, 0x07, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01,
	0x32, 0xd7, 0x02, 0x0a, 0x0b, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x42,
	0x12, 0x59, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x61, 0x64,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x74,
	0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x3a,
	0x01, 0x2a, 0x30, 0x01, 0x12, 0x74, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a,
	0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f,
	0x67, 0x65, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x01, 0x2a, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commons_proto_rawDescOnce sync.Once
	file_commons_proto_rawDescData = file_commons_proto_rawDesc
)

func file_commons_proto_rawDescGZIP() []byte {
	file_commons_proto_rawDescOnce.Do(func() {
		file_commons_proto_rawDescData = protoimpl.X.CompressGZIP(file_commons_proto_rawDescData)
	})
	return file_commons_proto_rawDescData
}

var file_commons_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_commons_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_commons_proto_goTypes = []interface{}{
	(KeyType)(0),                    // 0: proto.KeyType
	(*Report)(nil),                  // 1: proto.Report
	(*GetKeyRequest)(nil),           // 2: proto.GetKeyRequest
	(*HistoricalRange)(nil),         // 3: proto.HistoricalRange
	(*TokenRequest)(nil),            // 4: proto.TokenRequest
	(*TokenResponse)(nil),           // 5: proto.TokenResponse
	(*AddReportResponse)(nil),       // 6: proto.AddReportResponse
	(*GetDiagnosisKeyResponse)(nil), // 7: proto.GetDiagnosisKeyResponse
	(*TimestampedTEK)(nil),          // 8: proto.TimestampedTEK
}
var file_commons_proto_depIdxs = []int32{
	8, // 0: proto.Report.reports:type_name -> proto.TimestampedTEK
	3, // 1: proto.GetKeyRequest.hrange:type_name -> proto.HistoricalRange
	0, // 2: proto.TokenRequest.key_type:type_name -> proto.KeyType
	8, // 3: proto.GetDiagnosisKeyResponse.record:type_name -> proto.TimestampedTEK
	1, // 4: proto.DiagnosisDB.AddReport:input_type -> proto.Report
	2, // 5: proto.DiagnosisDB.GetDiagnosisKeys:input_type -> proto.GetKeyRequest
	4, // 6: proto.DiagnosisDB.GetAuthorizationToken:input_type -> proto.TokenRequest
	6, // 7: proto.DiagnosisDB.AddReport:output_type -> proto.AddReportResponse
	7, // 8: proto.DiagnosisDB.GetDiagnosisKeys:output_type -> proto.GetDiagnosisKeyResponse
	5, // 9: proto.DiagnosisDB.GetAuthorizationToken:output_type -> proto.TokenResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_commons_proto_init() }
func file_commons_proto_init() {
	if File_commons_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commons_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosisKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampedTEK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commons_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commons_proto_goTypes,
		DependencyIndexes: file_commons_proto_depIdxs,
		EnumInfos:         file_commons_proto_enumTypes,
		MessageInfos:      file_commons_proto_msgTypes,
	}.Build()
	File_commons_proto = out.File
	file_commons_proto_rawDesc = nil
	file_commons_proto_goTypes = nil
	file_commons_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiagnosisDBClient is the client API for DiagnosisDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiagnosisDBClient interface {
	// add an authorized report to the database
	AddReport(ctx context.Context, in *Report, opts ...grpc.CallOption) (*AddReportResponse, error)
	// query for all TEK+ENIN pairs matching the given filter. Predicates include:
	// - for a health authority
	// - between two timestamps
	GetDiagnosisKeys(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (DiagnosisDB_GetDiagnosisKeysClient, error)
	// allows authorized healthcare professional to obtain a unique authorization
	// key to give to a patient
	GetAuthorizationToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type diagnosisDBClient struct {
	cc grpc.ClientConnInterface
}

func NewDiagnosisDBClient(cc grpc.ClientConnInterface) DiagnosisDBClient {
	return &diagnosisDBClient{cc}
}

func (c *diagnosisDBClient) AddReport(ctx context.Context, in *Report, opts ...grpc.CallOption) (*AddReportResponse, error) {
	out := new(AddReportResponse)
	err := c.cc.Invoke(ctx, "/proto.DiagnosisDB/AddReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisDBClient) GetDiagnosisKeys(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (DiagnosisDB_GetDiagnosisKeysClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiagnosisDB_serviceDesc.Streams[0], "/proto.DiagnosisDB/GetDiagnosisKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &diagnosisDBGetDiagnosisKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiagnosisDB_GetDiagnosisKeysClient interface {
	Recv() (*GetDiagnosisKeyResponse, error)
	grpc.ClientStream
}

type diagnosisDBGetDiagnosisKeysClient struct {
	grpc.ClientStream
}

func (x *diagnosisDBGetDiagnosisKeysClient) Recv() (*GetDiagnosisKeyResponse, error) {
	m := new(GetDiagnosisKeyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *diagnosisDBClient) GetAuthorizationToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/proto.DiagnosisDB/GetAuthorizationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiagnosisDBServer is the server API for DiagnosisDB service.
type DiagnosisDBServer interface {
	// add an authorized report to the database
	AddReport(context.Context, *Report) (*AddReportResponse, error)
	// query for all TEK+ENIN pairs matching the given filter. Predicates include:
	// - for a health authority
	// - between two timestamps
	GetDiagnosisKeys(*GetKeyRequest, DiagnosisDB_GetDiagnosisKeysServer) error
	// allows authorized healthcare professional to obtain a unique authorization
	// key to give to a patient
	GetAuthorizationToken(context.Context, *TokenRequest) (*TokenResponse, error)
}

// UnimplementedDiagnosisDBServer can be embedded to have forward compatible implementations.
type UnimplementedDiagnosisDBServer struct {
}

func (*UnimplementedDiagnosisDBServer) AddReport(context.Context, *Report) (*AddReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReport not implemented")
}
func (*UnimplementedDiagnosisDBServer) GetDiagnosisKeys(*GetKeyRequest, DiagnosisDB_GetDiagnosisKeysServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDiagnosisKeys not implemented")
}
func (*UnimplementedDiagnosisDBServer) GetAuthorizationToken(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizationToken not implemented")
}

func RegisterDiagnosisDBServer(s *grpc.Server, srv DiagnosisDBServer) {
	s.RegisterService(&_DiagnosisDB_serviceDesc, srv)
}

func _DiagnosisDB_AddReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Report)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisDBServer).AddReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DiagnosisDB/AddReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisDBServer).AddReport(ctx, req.(*Report))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisDB_GetDiagnosisKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetKeyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiagnosisDBServer).GetDiagnosisKeys(m, &diagnosisDBGetDiagnosisKeysServer{stream})
}

type DiagnosisDB_GetDiagnosisKeysServer interface {
	Send(*GetDiagnosisKeyResponse) error
	grpc.ServerStream
}

type diagnosisDBGetDiagnosisKeysServer struct {
	grpc.ServerStream
}

func (x *diagnosisDBGetDiagnosisKeysServer) Send(m *GetDiagnosisKeyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DiagnosisDB_GetAuthorizationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisDBServer).GetAuthorizationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DiagnosisDB/GetAuthorizationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisDBServer).GetAuthorizationToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiagnosisDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DiagnosisDB",
	HandlerType: (*DiagnosisDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReport",
			Handler:    _DiagnosisDB_AddReport_Handler,
		},
		{
			MethodName: "GetAuthorizationToken",
			Handler:    _DiagnosisDB_GetAuthorizationToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDiagnosisKeys",
			Handler:       _DiagnosisDB_GetDiagnosisKeys_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "commons.proto",
}
