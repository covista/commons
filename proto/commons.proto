syntax = "proto3";
package proto;
option go_package = ".;proto";

service DiagnosisDB {
    // add an authorized report to the database
    rpc AddReport(Report) returns (AddReportResponse) {};

    // query for all TEK+ENIN pairs matching the given filter. Predicates include:
    // - for a health authority
    // - between two timestamps
    rpc GetDiagnosisKeys(GetKeyRequest) returns (stream GetDiagnosisKeyResponse) {};

    // allows authorized healthcare professional to obtain a unique authorization
    // key to give to a patient
    rpc GetAuthorizationToken(TokenRequest) returns (TokenResponse) {};
}

message Report {
    // a unique authorization key given to the user upon
    // interaction with an authorized (healthcare) professional
    bytes authorization_key = 1;

    // a set of timestamp-enin pairs (from the user)
    repeated TimestampedTEK reports = 2;
}

message GetKeyRequest {
    // retrieve keys for the given health authority
    bytes HAK = 1;
    // retrieve keys for the given day (ENIN rounded 'down'
    // to the nearest day)
    uint32 ENIN = 2;
    // alternatively fetch a temporal range of keys
    HistoricalRange hrange = 3;
}

message HistoricalRange {
    // YYYY-MM-DD  of *end* of day range; defaults to the current day
    string start_date = 1;
    // how many days back to retrieve records; defaults to 1
    uint32 days = 2;
}

message TokenRequest {
    // secret API key that uniquely identifies an authorized organization
    bytes api_key = 1;
    // the kind of key being requested; this is stored in the backend along
    // with the generated authorization_key
    KeyType key_type = 2;
    // bounds on the time range for the allowed keys; RFC 3339 timestamps
    string permitted_range_start = 3;
    string permitted_range_end = 4;
}

message TokenResponse {
    string error = 1;
    // unique 16-byte key generated to be given to a user. The generation
    // of this key means that the association of <authority, auth_key> is
    // stored in the backend
    bytes authorization_key = 2;
}

message AddReportResponse {
    string error = 1;
}

message GetDiagnosisKeyResponse {
    string error = 1;
    TimestampedTEK record = 2;
}

message TimestampedTEK {
    bytes TEK = 1;
    uint32 ENIN = 2;
}

enum KeyType {
    UNKNOWN = 0;
    DIAGNOSED = 1;
}
